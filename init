#!/bin/bash
# Source this from your bashrc to enable .bash.

DOTBASH=${DOTBASH:-$HOME/.bash}

dotbash()          { dotbash_$1 "${@:2}"; }
dotbash_dirclone() { [[ -d "$DOTBASH/$1" ]] || git clone "$2" "$DOTBASH/$1"; }
dotbash_use()      { dotbash_layer_$1 "${@:2}"; }

dotbash_pull() {
  (
    cd "$DOTBASH"
    git pull
    source init
    source layers

    for r in *; do
      if [[ -d "$r/.git" ]]; then
        cd "$r"
        git pull
        cd "$DOTBASH"
      fi
    done
  )
}

# Module definitions
dotbash_layer_apply() {
  dotbash_dirclone bash-apply https://github.com/spencertipping/bash-apply.git
  source "$DOTBASH/bash-apply/bash-apply"
}

dotbash_layer_cd-aliases() {
  alias b='cd -'
  alias bb='cd -2'
  alias b2='cd -2'
  alias b3='cd -3'
  alias b4='cd -4'

  alias u='cd ..'
  alias uu='cd ../..'
  alias u2='cd ../..'
  alias u3='cd ../../..'
  alias u4='cd ../../../..'
  alias u5='cd ../../../../..'
  alias u6='cd ../../../../../..'
}

dotbash_layer_cd() {
  dotbash_dirclone cd https://github.com/spencertipping/cd.git
  CD_EXTENSIONS=( "$@" )
  source "$DOTBASH/cd/cd"
}

dotbash_layer_docker() {
  dr() {
    # Launch a "docker repl" using a Dockerfile whose command is /bin/bash.
    # Builds an untagged image and runs it with a transient TTY-enabled
    # container whose /data is mounted to the current directory. Also sets up
    # an X11 connection to the current host display, so the docker can run
    # graphical applications.

    if [[ -n "$DISPLAY" ]]; then
      XAUTH=/tmp/.docker.xauth${DISPLAY//:/.}
      xauth nlist $DISPLAY | sed -e 's/^..../ffff/' | xauth -f $XAUTH nmerge -
      X_OPTS="-v /tmp/.X11-unix:/tmp/.X11-unix \
              -v $XAUTH:$XAUTH \
              -e XAUTHORITY=$XAUTH \
              -e DISPLAY=$DISPLAY"
    else
      X_OPTS=
    fi

    docker run -v $PWD:/data $X_OPTS --rm -it "$@" $(docker build -q .)
  }

  dsh() {
    # Run a shell in the given container
    docker exec -it $1 /bin/bash
  }

  dsi() {
    # Run a shell in the given _image_, auto-removing it when we're done
    local image=$1
    shift
    docker run --rm "$@" -it $image /bin/bash
  }
}

dotbash_layer_git-aliases() {
  alias gc='git commit -am'
  alias gU='git push'
  alias gu='git pull'
  alias gs='git status'
  alias gd='git diff'
  alias gL='git log'
}

dotbash_layer_hats() {
  dotbash_dirclone hats https://github.com/spencertipping/bash-hats.git
  source "$DOTBASH/hats/bash-hats"
}

dotbash_layer_history() {
  export HISTCONTROL=ignoredups:ignorespace
  alias otr='history -c; export HISTIGNORE="*"'
}

dotbash_layer_lambda() {
  dotbash_dirclone lambda https://github.com/spencertipping/bash-lambda.git
  bl() {
    source "$DOTBASH/lambda/bash-lambda"
  }
}

dotbash_layer_lazytest() {
  dotbash_dirclone lazytest https://github.com/spencertipping/lazytest.git
  [[ -e ~/bin/lazytest ]] || ln -s "$DOTBASH/lazytest/lazytest" ~/bin/
}

dotbash_layer_ls-aliases() {
  alias ls='ls --color=auto'
  alias ll='ls -ilh'
  alias la='ls -a'
  alias lst='ls -tr'
  alias s='ls'
}

dotbash_layer_nfu() {
  dotbash_dirclone nfu https://github.com/spencertipping/nfu.git
  [[ -e ~/bin/nfu ]] || ln -s "$DOTBASH/nfu/nfu" ~/bin/
}

dotbash_layer_ni() {
  dotbash_dirclone ni https://github.com/spencertipping/ni.git
  [[ -e ~/bin/ni ]] || ln -s "$DOTBASH/ni/ni" ~/bin/
}

dotbash_layer_path-bin() {
  [[ -d "$HOME/bin" ]] || mkdir -p "$HOME/bin"
  export PATH="$HOME/bin:$PATH"
}

dotbash_layer_path-here() {
  export PATH="$PATH:."
}

dotbash_layer_prompt() {
  dotbash_dirclone prompt https://github.com/spencertipping/bash-prompt.git
  source "$DOTBASH/prompt/prompt"
}

dotbash_layer_tasks() {
  # Define this function globally, then call it when initializing (if you use
  # this layer, call it after tmux).
  tasks() {
    if [[ -r ~/.tasks ]]; then
      perl -npe 's/^/task: /' < ~/.tasks
    else
      echo "no task file; create $HOME/.tasks to enable task list" >&2
      return 1
    fi
  }
  tasks
}

dotbash_layer_tmux() {
  dotbash_dirclone tmux https://github.com/spencertipping/bashrc-tmux.git
  source "$DOTBASH/tmux/bashrc-tmux"
  source "$DOTBASH/tmux/bashrc-xpra"
}

source "$DOTBASH/layers"
